// Generated by CoffeeScript 1.6.3
(function() {
  describe("Raffler", function() {
    it("should be defined", function() {
      return expect(Raffler).toBeDefined();
    });
    describe("Raffler Model", function() {
      it("should exist", function() {
        return expect(Raffler.Models.Entry).toBeDefined();
      });
      describe("Attributes", function() {
        var entry;
        entry = new Raffler.Models.Entry;
        return it("should have default attributes", function() {
          expect(entry.attributes.name).toBeDefined();
          return expect(entry.attributes.winner).toBeDefined();
        });
      });
      return describe("Validations (we don't have any checks on our application, so just check if exists with .toBeTruthy(). I actually couldn't get model validation to work. :(", function() {
        var attrs;
        attrs = {};
        beforeEach(function() {
          return attrs = {
            name: 'Will',
            winner: false
          };
        });
        afterEach(function() {
          var entry;
          entry = new Raffler.Models.Entry(attrs);
          return expect(entry.isValid()).toBeTruthy();
        });
        it("should valide the presence of name", function() {
          return attrs["name"] = 'Will';
        });
        return it("should validate the presence of winner atrribute", function() {
          return attrs["winner"] = false;
        });
      });
    });
    describe("Raffler Collection", function() {
      return it("should exist", function() {
        return expect(Raffler.Collections.Entries).toBeDefined();
      });
    });
    return describe("Raffler View", function() {
      var entries_data, invisible_table;
      it("should exist", function() {
        return expect(Raffler.Views.EntriesIndex).toBeDefined();
      });
      entries_data = [
        {
          name: 'Will',
          winner: false
        }, {
          name: 'Kip',
          winner: false
        }, {
          name: 'Pac Man',
          winner: false
        }
      ];
      invisible_table = document.createElement('table');
      beforeEach(function() {
        this.entries_collection = new Raffler.Collections.Entries(entries_data);
        return this.entries_view = new Raffler.Views.EntriesIndex({
          collection: this.entries_collection,
          el: invisible_table
        });
      });
      it("should have the right element", function() {
        return expect(this.entries_view.el).toEqual(invisible_table);
      });
      it("should have the right collection", function() {
        return expect(this.entries_view.collection).toEqual(this.entries_collection);
      });
      it("should have collection length", function() {
        console.log(this.entries_view.collection);
        return expect(this.entries_view.collection.length).toEqual(3);
      });
      describe("createEntry", function() {
        return it("should create an entry, entry length now 4", function() {
          this.entries_view.createEntry({
            name: 'Joe',
            winner: false
          });
          console.log(this.entries_view.collection);
          return expect(this.entries_view.collection.length).toEqual(4);
        });
      });
      describe("kill", function() {
        return it("should delete an entry, entry length to 2 since collection is reset to 3 names due to beforeEach in test", function() {
          this.entries_view.kill({
            item: this.entries_view.collection.models[3]
          });
          console.log(this.entries_view.collection);
          return expect(this.entries_view.collection.length).toEqual(2);
        });
      });
      return describe("drawWinner", function() {
        return it("should draw a winner (see console log. one entry should be winner)", function() {
          this.entries_view.drawWinner({
            entries: this.entries_collection
          });
          console.log("Entry 1 winner val: ", this.entries_view.collection.models[0].attributes.winner);
          console.log("Entry 2 winner val: ", this.entries_view.collection.models[1].attributes.winner);
          return console.log("Entry 3 winner val: ", this.entries_view.collection.models[2].attributes.winner);
        });
      });
    });
  });

}).call(this);
